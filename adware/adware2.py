import logging
import sys
import random
import time

from PyQt5.QtWidgets import QApplication, QDialog, QLabel, QVBoxLayout


class AdWindow(QDialog):
    """ This class represents an ad window shown on the screen. """

    def __init__(self, ad_slogan, parent=None):
        super(AdWindow, self).__init__(parent)
        self.setWindowTitle("Advertisement!")

        # Create a layout to display the ad slogan.
        self.label = QLabel(ad_slogan)
        layout = QVBoxLayout()
        layout.addWidget(self.label)

        self.setLayout(layout)

    def closeEvent(self, event):
        # Ignore the close event so that the ad
        # window cannot be closed by pressing the close button.
        event.ignore()


class Adware(QApplication):
    """ This class represents the adware implementation. """

    def __init__(self, args):
        super(Adware, self).__init__(args)

    @property
    def advert_slogans(self):
        """ Slogans of the promoted ads. """
        return (
            'Buy the milk in the milk shops!',
            'Buy the clothes in the clothing stores!',
            'Buy the food in the grocery stores!'
        )

    def create_ad_window(self, ad_slogan):
        """ Creates a window showing the advertisement slogan.

        :param str ad_slogan: Text of the ad.
        """
        window = AdWindow(ad_slogan=ad_slogan)
        window.show()
        return window

    def show_ads(self, duration):
        """ Creates the main GUI application and shows the ads
        based on `:class:~Adware.advert_slogans` for the specified duration.

        :param int duration: Duration in seconds to show the ads.
        """
        end_time = time.time() + duration
        ad_windows = []
        while time.time() < end_time:
            for advert in self.advert_slogans:
                # Create a new ad window.
                ad_window = self.create_ad_window(advert)
                # Move this window to a random location on the screen.
                x_coordinate, y_coordinate = random.randint(1, 800), random.randint(1, 600)
                ad_window.move(x_coordinate, y_coordinate)
                ad_windows.append(ad_window)

        return ad_windows


if __name__ == '__main__':
    logging.basicConfig(level=logging.DEBUG)

    # Create our adware and show the ads for 30 seconds.
    adware = Adware(sys.argv)
    windows = adware.show_ads(duration=10)

    # Wait for the specified duration.
    time.sleep(2)

    # Close all the ad windows.
    for window in windows:
        window.close()

    sys.exit(adware.exec_())
